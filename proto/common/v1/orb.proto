syntax = "proto3";

package common.v1;

// Wrapper message for all messages that can be sent to and from the orb. The reason we do this is to ensure static
// typing in the clients while the server can still handle all messages through the Any type.
message W {
  oneof w {
    NoState no_state = 1;
    AnnounceOrbId announce_orb_id = 2;
    AnnounceAppId announce_app_id = 3;
    Heartbeat heartbeat = 4;
  }
}

message Heartbeat {
  uint64 seq = 1;
}
message NoState {}
message AnnounceOrbId {
  enum HardwareType {
    HARDWARE_TYPE_UNSPECIFIED = 0;
    HARDWARE_TYPE_PEARL = 1;
    HARDWARE_TYPE_DIAMOND = 2;
  }

  string orb_id = 1;
  // ModeType mode_type = 2;
  HardwareType hardware_type = 3;
  // bool has_preflight_checks = 4;
  // bool has_preflight_checks_with_occlusion = 5;
  // Selector selector = 6;
  bool heartbeat = 7;
  uint64 protocol_version = 8;
}

// Appointment metadata for verification purposes
message AppointmentMetadata {
  string proof = 1;
  string merkle_root = 2;
  string nullifier_hash = 3;
  uint64 signal = 4;
}

// static data that is hashed with the user QR code
message AppAuthenticatedData {
  string self_custody_public_key = 1;
  string identity_commitment = 2;
  string os = 3;
  string os_version = 4;
  uint32 pcp_version = 5;
}

message AnnounceAppId {
  uint64 protocol_version = 1;
  bool heartbeat = 2;
  AppAuthenticatedData app_data = 3;
  AppointmentMetadata appointment_metadata = 4;
  string bypass_age_verification_token = 5;
}
