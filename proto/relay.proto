syntax = "proto3";

package relay;

import "config/backend.proto";
import "config/orb.proto";
import "self_serve/app.proto";
import "self_serve/orb.proto";

enum EntityType {
  ENTITY_TYPE_UNSPECIFIED = 0;
  APP = 1;
  ORB = 2;
  SERVICE = 3;
}

message Entity {
  string id = 1;
  EntityType entity_type = 2;
}

// Service Definitions
service OrbService {
  rpc OrbConnect(stream RelayMessage) returns (stream RelayMessage);
}

service AppService {
  rpc AppConnect(stream RelayMessage) returns (stream RelayMessage);
}

service BackendService {
  rpc RequestOrbUpdateConfig(config.OrbUpdateConfigRequest) returns (config.OrbUpdateConfigResponse);
}

message RelayMessage {
  Entity src = 1;
  Entity dst = 2;
  RelayPayload payload = 3;
}

message OrbConnectRequest {
  string orb_id = 1;
  string auth_token = 2;
}

message AppConnectRequest {
  string app_id = 1;
  string auth_token = 2;
}

message ConnectResponse {
  string client_id = 1;
  bool success = 2;
  string error = 3;
}

message Ping {
  optional string id = 1;
}

message Pong {
  optional string id = 1;
}

message RelayPayload {
  oneof payload {
    OrbConnectRequest orb_connect_request = 1;
    AppConnectRequest app_connect_request = 2;
    ConnectResponse connect_response = 3;
    Ping ping = 4;
    Pong pong = 5;

    // Config Payloads
    config.OrbReceiveConfigUpdate orb_receive_config_update = 6;
    config.OrbUpdateConfigRequest orb_update_config_request = 7;
    config.OrbUpdateConfigResponse orb_update_config_response = 8;

    // Self-Serve Commands
    selfserve.orb.AnnounceOrbId announce_orb_id = 9;
    selfserve.orb.CaptureStarted capture_started = 10;
    selfserve.orb.CaptureEnded capture_ended = 11;
    selfserve.orb.SignupStarted signup_started = 12;
    selfserve.orb.SignupEnded signup_ended = 13;
    selfserve.orb.AgeVerificationRequiredFromOperator age_verification_required_from_operator = 14;
    selfserve.app.StartCapture start_capture = 15;
  }
}
