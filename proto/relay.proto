syntax = "proto3";

package relay;

import "config/backend.proto";
import "config/orb.proto";
import "google/protobuf/any.proto";
import "self_serve/app/v1/app.proto";
import "self_serve/orb/v1/orb.proto";

enum EntityType {
  ENTITY_TYPE_UNSPECIFIED = 0;
  APP = 1;
  ORB = 2;
  SERVICE = 3;
}

message Entity {
  string id = 1;
  EntityType entity_type = 2;
}

service RelayService {
  rpc RelayConnect(stream RelayMessage) returns (stream RelayMessage);
}

service OrbService {
  rpc OrbConnect(stream RelayMessage) returns (stream RelayMessage);
}

service AppService {
  rpc AppConnect(stream RelayMessage) returns (stream RelayMessage);
}

service BackendService {
  rpc RequestOrbUpdateConfig(config.OrbUpdateConfigRequest) returns (config.OrbUpdateConfigResponse);
}

message RelayMessage {
  Entity src = 1;
  Entity dst = 2;
  RelayPayload payload = 3;
  uint64 seq = 4;
}

message Ack {
  uint64 seq = 1;
}

message EstablishConnectionRequest {
  string client_id = 1;
  oneof auth_method {
    string token = 2;
    ZkpAuthRequest zkp_auth_request = 3;
  }
}

message OrbConnectRequest {
  string orb_id = 1;
  string auth_token = 2;
}

message AppConnectRequest {
  string app_id = 1;
  oneof auth_method {
    string token = 2;
    ZkpAuthRequest zkp_auth_request = 3;
  }
}

message ZkpAuthRequest {
  string root = 1;
  string signal = 2;
  string nullifier_hash = 3;
  string proof = 4;
}

message ConnectResponse {
  string client_id = 1;
  bool success = 2;
  string error = 3;
}

message Ping {
  optional string id = 1;
}

message Pong {
  optional string id = 1;
}

message RelayPayload {
  oneof payload {
    Ack ack = 1;
    OrbConnectRequest orb_connect_request = 2;
    EstablishConnectionRequest establish_connection_request = 3;
    AppConnectRequest app_connect_request = 4;
    ConnectResponse connect_response = 5;
    Ping ping = 6;
    Pong pong = 7;

    // Config Payloads
    config.OrbReceiveConfigUpdate orb_receive_config_update = 8;
    config.OrbUpdateConfigRequest orb_update_config_request = 9;
    config.OrbUpdateConfigResponse orb_update_config_response = 10;

    // Self-Serve Commands
    self_serve.orb.v1.AnnounceOrbId announce_orb_id = 11;
    self_serve.orb.v1.CaptureStarted capture_started = 12;
    self_serve.orb.v1.CaptureEnded capture_ended = 13;
    self_serve.orb.v1.SignupEnded signup_ended = 14;
    self_serve.orb.v1.AgeVerificationRequiredFromOperator age_verification_required_from_operator = 15;
    self_serve.app.v1.StartCapture start_capture = 16;
    self_serve.app.v1.RequestState request_state = 17;
    self_serve.orb.v1.SelfServeStatus self_serve_status = 18;
    self_serve.orb.v1.NoState no_state = 19;
    self_serve.orb.v1.CaptureTriggerTimeout capture_trigger_timeout = 20;
  }
}
