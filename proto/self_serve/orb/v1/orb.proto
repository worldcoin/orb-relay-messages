syntax = "proto3";

package self_serve.orb.v1;

// Wrapper message for all messages that can be sent to and from the orb. The reason we do this is to ensure static
// typing in the clients while the server can still handle all messages through the Any type.
message W {
  oneof w {
    CaptureStarted capture_started = 1;
    CaptureTriggerTimeout capture_trigger_timeout = 2;
    CaptureEnded capture_ended = 3;
    SignupEnded signup_ended = 4;
    AgeVerificationRequiredFromOperator age_verification_required_from_operator = 5;
    PreflightCheck preflight_check = 6;
  }
}

message CaptureStarted {}
message CaptureTriggerTimeout {}
message CaptureEnded {
  enum FailureFeedbackType {
    FAILURE_FEEDBACK_TYPE_UNSPECIFIED = 0;
    FAILURE_FEEDBACK_TYPE_FACE_OCCLUSION_OR_POOR_LIGHTING = 1;
    FAILURE_FEEDBACK_TYPE_TOO_FAR = 2;
    FAILURE_FEEDBACK_TYPE_TOO_CLOSE = 3;
    FAILURE_FEEDBACK_TYPE_EYES_OCCLUSION = 4;
  }

  bool success = 1;
  repeated FailureFeedbackType failure_feedback = 2;
}
message SignupEnded {
  enum FailureFeedbackType {
    FAILURE_FEEDBACK_TYPE_UNSPECIFIED = 0;
    FAILURE_FEEDBACK_TYPE_CONTACT_LENSES = 1;
    FAILURE_FEEDBACK_TYPE_EYE_GLASSES = 2;
    FAILURE_FEEDBACK_TYPE_MASK = 3;
    FAILURE_FEEDBACK_TYPE_FACE_OCCLUSION = 4;
    FAILURE_FEEDBACK_TYPE_MULTIPLE_FACES = 5;
    FAILURE_FEEDBACK_TYPE_EYES_OCCLUSION = 6;
    FAILURE_FEEDBACK_TYPE_HEAD_POSE = 7;
    FAILURE_FEEDBACK_TYPE_UNDERAGED = 8;
    FAILURE_FEEDBACK_TYPE_SERVER_ERROR = 9;
    FAILURE_FEEDBACK_TYPE_LOW_IMAGE_QUALITY = 10;
  }

  bool success = 1;
  repeated FailureFeedbackType failure_feedback = 2;
}
message AgeVerificationRequiredFromOperator {}

message PreflightCheck {
  bool is_user_seen = 1;
  bool is_not_too_far = 2;
  bool is_not_too_close = 3;
}
