syntax = "proto3";

package self_serve.orb.v1;

// Wrapper message for all messages that can be sent to and from the orb. The reason we do this is to ensure static
// typing in the clients while the server can still handle all messages through the Any type.
message W {
  oneof w {
    CaptureStarted capture_started = 1;
    CaptureTriggerTimeout capture_trigger_timeout = 2;
    CaptureEnded capture_ended = 3;
    SignupEnded signup_ended = 4;
    AgeVerificationRequiredFromOperator age_verification_required_from_operator = 5;
    PreflightCheck preflight_check = 6;
    AppointmentFailure appointment_failure = 7;
    AppointmentTimeout appointment_timeout = 8;
    UserDataFailure user_data_failure = 9;
  }
}

// Failures from the orb validating the user data
message AppointmentFailure {
  string error_code = 1;
}
message AppointmentTimeout {}
message UserDataFailure {
  enum ErrorType {
    HASH_INVALID = 0;
    // from signup service - user validation request errors
    SERVER_ERROR = 1;
    INVALID_REQUEST_DATA = 2;
    BYPASS_AGE_TOKEN_INVALID = 3;
    UNKNOWN = 4;
  }

  ErrorType error_type = 1;
}
message CaptureStarted {}
message CaptureTriggerTimeout {}
message CaptureEnded {
  enum FailureFeedbackType {
    FAILURE_FEEDBACK_TYPE_UNSPECIFIED = 0;
    FAILURE_FEEDBACK_TYPE_FACE_OCCLUSION_OR_POOR_LIGHTING = 1;
    FAILURE_FEEDBACK_TYPE_TOO_FAR = 2;
    FAILURE_FEEDBACK_TYPE_TOO_CLOSE = 3;
    FAILURE_FEEDBACK_TYPE_EYES_OCCLUSION = 4;
    FAILURE_FEEDBACK_TYPE_USER_ABORT = 5;
    FAILURE_FEEDBACK_TYPE_FACE_NOT_SEEN = 6;
  }

  bool success = 1;
  repeated FailureFeedbackType failure_feedback = 2;
}
message SignupEnded {
  enum FailureFeedbackType {
    FAILURE_FEEDBACK_TYPE_UNSPECIFIED = 0;
    FAILURE_FEEDBACK_TYPE_CONTACT_LENSES = 1;
    FAILURE_FEEDBACK_TYPE_EYE_GLASSES = 2;
    FAILURE_FEEDBACK_TYPE_MASK = 3;
    FAILURE_FEEDBACK_TYPE_FACE_OCCLUSION = 4;
    FAILURE_FEEDBACK_TYPE_MULTIPLE_FACES = 5;
    FAILURE_FEEDBACK_TYPE_EYES_OCCLUSION = 6;
    FAILURE_FEEDBACK_TYPE_HEAD_POSE = 7;
    FAILURE_FEEDBACK_TYPE_UNDERAGED = 8;
    FAILURE_FEEDBACK_TYPE_SERVER_ERROR = 9;
    FAILURE_FEEDBACK_TYPE_LOW_IMAGE_QUALITY = 10;
    // IRIS Model errors
    FAILURE_FEEDBACK_TYPE_EYES_OCCLUSION_UPPER = 11;
    FAILURE_FEEDBACK_TYPE_EYES_OCCLUSION_LOWER = 12;
    FAILURE_FEEDBACK_TYPE_EYES_OCCLUSION_ABNORMAL = 13;
    FAILURE_FEEDBACK_TYPE_IRIS_GENERIC = 14;
    FAILURE_FEEDBACK_TYPE_OFF_GAZE = 15;
    FAILURE_FEEDBACK_TYPE_PUPIL2_IRIS_GENERIC = 16;
    FAILURE_FEEDBACK_TYPE_PUPIL2_IRIS_DILATION = 17;
    FAILURE_FEEDBACK_TYPE_PUPIL2_IRIS_CONSTRICTION = 18;
    FAILURE_FEEDBACK_TYPE_PUPIL2_IRIS_OFFCENTER = 19;
    FAILURE_FEEDBACK_TYPE_IRIS_NOT_CENTERED = 20;
  }

  bool success = 1;
  repeated FailureFeedbackType failure_feedback = 2;
}
message AgeVerificationRequiredFromOperator {}

message PreflightCheck {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_OK = 1;
    STATUS_FACE_NOT_SEEN = 2;
    STATUS_FACE_TOO_FAR = 3;
    STATUS_FACE_TOO_CLOSE = 4;
    STATUS_FACE_TOO_LOW = 5;
    STATUS_FACE_TOO_HIGH = 6;
    STATUS_CHIN_TOO_LOW = 7;
    STATUS_CHIN_TOO_HIGH = 8;
    STATUS_HEAD_POSE_NOT_STRAIGHT = 9;
    STATUS_POSITION_NOT_STABLE = 10;
    STATUS_FACE_OCCLUDED = 11;
    STATUS_WARMING_UP = 12;
    STATUS_FACE_GLASSES = 13;
    STATUS_FACE_MASK = 14;
    STATUS_HAIR_OCCLUSION = 15;
  }

  Status status = 1;
}
